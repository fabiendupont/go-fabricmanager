#!/bin/bash

# CLI Comparison Script
# Compares original fmpm CLI with Go CLI implementation

set -e

# Configuration
FABRICMANAGER_BASE_URL="https://developer.download.nvidia.com/compute/nvidia-driver/redist/fabricmanager"
ARCH="linux-x86_64"
TEMP_DIR="/tmp/fabricmanager-cli-comparison"
OUTPUT_DIR="coverage"
GO_FMPM="fmpm"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to download and extract FabricManager binary
download_fabricmanager_binary() {
    local version="$1"
    local output_dir="$2"
    
    log_info "Downloading FabricManager version $version for CLI comparison..."
    
    # Create temp directory
    mkdir -p "$TEMP_DIR"
    
    # Download the archive
    local archive_name="fabricmanager-linux-x86_64-${version}-archive.tar.xz"
    local download_url="$FABRICMANAGER_BASE_URL/$ARCH/$archive_name"
    local archive_path="$TEMP_DIR/$archive_name"
    
    if ! curl -L -o "$archive_path" "$download_url"; then
        log_error "Failed to download $download_url"
        return 1
    fi
    
    # Extract the archive
    if ! tar -xf "$archive_path" -C "$TEMP_DIR"; then
        log_error "Failed to extract archive"
        return 1
    fi
    
    # Find the extracted directory
    local extracted_dir=$(find "$TEMP_DIR" -maxdepth 1 -type d -name "fabricmanager-linux-x86_64-${version}-*" | head -1)
    
    if [ -z "$extracted_dir" ]; then
        log_error "Could not find extracted directory"
        return 1
    fi
    
    # Find the binary
    local binary_path=$(find "$extracted_dir" -name "nv-fabricmanager" -type f | head -1)
    
    if [ -z "$binary_path" ]; then
        log_error "Could not find nv-fabricmanager binary in extracted archive"
        return 1
    fi
    
    # Make it executable
    chmod +x "$binary_path"
    
    echo "$binary_path"
}

# Function to extract CLI options from help output
extract_cli_options() {
    local binary="$1"
    local output_file="$2"
    
    log_info "Extracting CLI options from $binary..."
    
    if [ ! -f "$binary" ]; then
        log_warning "Binary $binary not found"
        return 1
    fi
    
    # Get help output and extract options
    if "$binary" --help 2>/dev/null | grep -E '^\s*-[a-zA-Z]|^\s*--[a-zA-Z]' > "$output_file" 2>/dev/null; then
        log_success "Extracted $(wc -l < "$output_file") options from $binary"
    else
        log_warning "Could not extract options from $binary"
        return 1
    fi
}

# Function to compare CLI implementations
compare_cli_implementations() {
    local original_options="$1"
    local go_options="$2"
    local report_file="$3"
    local version="$4"
    
    log_info "Comparing CLI implementations..."
    
    # Create output directory
    mkdir -p "$OUTPUT_DIR"
    
    # Generate comparison report
    cat > "$report_file" << EOF
# CLI Implementation Comparison

Generated on: $(date)
FabricManager Version: $version

## Summary

- **Original fmpm options:** $(wc -l < "$original_options" 2>/dev/null || echo "0")
- **Go fmpm options:** $(wc -l < "$go_options" 2>/dev/null || echo "0")

## Original fmpm Options (Not in Go CLI)

\`\`\`
$(comm -23 "$original_options" "$go_options" 2>/dev/null || echo "None found")
\`\`\`

## Go fmpm Options (Not in Original)

\`\`\`
$(comm -13 "$original_options" "$go_options" 2>/dev/null || echo "None found")
\`\`\`

## Common Options

\`\`\`
$(comm -12 "$original_options" "$go_options" 2>/dev/null || echo "None found")
\`\`\`

## Recommendations

$(generate_cli_recommendations "$original_options" "$go_options")

---

*This report was automatically generated by the CLI comparison script.*
EOF
    
    log_success "CLI comparison report generated: $report_file"
}

# Function to generate CLI recommendations
generate_cli_recommendations() {
    local original_file="$1"
    local go_file="$2"
    
    local missing_count=$(comm -23 "$original_file" "$go_file" 2>/dev/null | wc -l)
    local extra_count=$(comm -13 "$original_file" "$go_file" 2>/dev/null | wc -l)
    
    if [ "$missing_count" -gt 0 ]; then
        echo "- **High Priority:** $missing_count original CLI options are not implemented in Go CLI"
        echo "- Consider implementing missing CLI options for full compatibility"
    else
        echo "- **Excellent:** All original CLI options are implemented in Go CLI"
    fi
    
    if [ "$extra_count" -gt 0 ]; then
        echo "- **Note:** $extra_count Go CLI options are not in the original (extensions)"
    fi
    
    echo "- Test CLI functionality to ensure compatibility"
    echo "- Update this report when adding new CLI options"
}

# Function to show CLI comparison summary
show_cli_summary() {
    local original_options="$1"
    local go_options="$2"
    
    echo "=== CLI Comparison Summary ==="
    echo "Original fmpm options: $(wc -l < "$original_options" 2>/dev/null || echo "0")"
    echo "Go fmpm options: $(wc -l < "$go_options" 2>/dev/null || echo "0")"
    echo "Missing options: $(comm -23 "$original_options" "$go_options" 2>/dev/null | wc -l)"
    echo "Extra options: $(comm -13 "$original_options" "$go_options" 2>/dev/null | wc -l)"
    echo "Common options: $(comm -12 "$original_options" "$go_options" 2>/dev/null | wc -l)"
}

# Main function
main() {
    local show_summary=false
    local clean_temp=false
    local target_version=""
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --version)
                target_version="$2"
                shift 2
                ;;
            --summary)
                show_summary=true
                shift
                ;;
            --clean)
                clean_temp=true
                shift
                ;;
            --help)
                echo "Usage: $0 [OPTIONS]"
                echo ""
                echo "Options:"
                echo "  --version VER   Compare with specific FabricManager version"
                echo "  --summary       Show CLI comparison summary"
                echo "  --clean         Clean temporary files"
                echo "  --help          Show this help message"
                echo ""
                echo "Examples:"
                echo "  $0 --version 575.57.08    # Compare with FabricManager 575.57.08"
                echo "  $0 --summary              # Show summary of last comparison"
                exit 0
                ;;
            *)
                log_error "Unknown option: $1"
                exit 1
                ;;
        esac
    done
    
    # Clean temp files if requested
    if [ "$clean_temp" = true ]; then
        rm -rf "$TEMP_DIR"
        log_success "Cleaned temporary files"
        exit 0
    fi
    
    # Show summary if requested
    if [ "$show_summary" = true ]; then
        if [ -f "$OUTPUT_DIR/cli-comparison-report.md" ]; then
            cat "$OUTPUT_DIR/cli-comparison-report.md"
        else
            log_warning "No CLI comparison report found. Run comparison first."
        fi
        exit 0
    fi
    
    # Require version for comparison
    if [ -z "$target_version" ]; then
        log_error "Please specify a FabricManager version with --version"
        echo "Example: $0 --version 575.57.08"
        exit 1
    fi
    
    # Create temp directory
    mkdir -p "$TEMP_DIR"
    
    # Download and extract FabricManager binary
    local original_binary=$(download_fabricmanager_binary "$target_version" "$TEMP_DIR")
    if [ $? -ne 0 ]; then
        log_error "Failed to download FabricManager binary"
        exit 1
    fi
    
    # Extract CLI options
    local original_options="$TEMP_DIR/original_options.txt"
    local go_options="$TEMP_DIR/go_options.txt"
    
    extract_cli_options "$original_binary" "$original_options" || true
    extract_cli_options "$GO_FMPM" "$go_options" || true
    
    # Generate comparison report
    local report_file="$OUTPUT_DIR/cli-comparison-report.md"
    compare_cli_implementations "$original_options" "$go_options" "$report_file" "$target_version"
    
    # Show summary
    show_cli_summary "$original_options" "$go_options"
    
    log_success "CLI comparison completed"
}

# Run main function
main "$@" 